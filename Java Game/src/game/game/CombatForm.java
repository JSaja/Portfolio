package hw5.game;

import javax.swing.DefaultListModel;

/**
 *
 * @author baylor
 */
public class CombatForm extends javax.swing.JDialog
{
	private Agent player, enemy;        

	public CombatForm(Agent player, Agent enemy)
	{
		setModal(true);
		initComponents();
		this.enemy = enemy;
		setPlayer(player);
		loadActions();
		setLocationRelativeTo(null);
	}

	public void setPlayer(Agent player)
	{
		this.player = player;
		setTitle(player.type + " vs. "+ enemy.type);
		hpLabel.setText(""+player.health);
	}

	private void loadActions()
	{
            // name, damage, selfinflictedDamage, heal,
		DefaultListModel<Action> actionsModel = new DefaultListModel<>();
		actionsModel.addElement(new Action("Cut",25, 0)); 
		actionsModel.addElement(new Action("Splash", 0, 0));
                actionsModel.addElement(new Action("Self-Destruct", 100, 0));
                actionsModel.addElement(new Action("Leech-Seed", 15, 10));
                actionsModel.addElement(new Action("Auto-kill", Integer.MAX_VALUE, 0));
		actionList.setModel(actionsModel);
                
                ppPane.setText(""+Game.getInstance().cutPP+System.lineSeparator()+
                               ""+Game.getInstance().splashPP+System.lineSeparator()+
                               ""+Game.getInstance().selfDestructPP+System.lineSeparator()+
                               ""+Game.getInstance().leechSeedPP+System.lineSeparator()+
                               ""+Game.getInstance().autoKillPP+System.lineSeparator());                
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        hpLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        actionList = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        selectActionButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        hpEnemyLabel = new java.awt.Label();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        playerDamagedLabel = new java.awt.Label();
        enemyDamagedLabel = new java.awt.Label();
        label7 = new java.awt.Label();
        jScrollPane4 = new javax.swing.JScrollPane();
        ppPane = new javax.swing.JTextPane();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Stencil", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Player HP:");

        hpLabel.setFont(new java.awt.Font("Impact", 1, 18)); // NOI18N
        hpLabel.setForeground(new java.awt.Color(0, 0, 0));
        hpLabel.setText("0");

        actionList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        actionList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(actionList);

        jLabel3.setFont(new java.awt.Font("Stencil", 0, 18)); // NOI18N
        jLabel3.setText("Moves");

        selectActionButton.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        selectActionButton.setText("Attack");
        selectActionButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                selectActionButtonActionPerformed(evt);
            }
        });

        outputTextArea.setEditable(false);
        outputTextArea.setBackground(new java.awt.Color(0, 255, 255));
        outputTextArea.setColumns(20);
        outputTextArea.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        outputTextArea.setRows(5);
        outputTextArea.setTabSize(4);
        jScrollPane2.setViewportView(outputTextArea);

        hpEnemyLabel.setFont(new java.awt.Font("Impact", 1, 18)); // NOI18N
        hpEnemyLabel.setText("100");

        label1.setFont(new java.awt.Font("Stencil", 1, 18)); // NOI18N
        label1.setText("Enemy HP:");

        label2.setAlignment(java.awt.Label.CENTER);
        label2.setFont(new java.awt.Font("Stencil", 1, 24)); // NOI18N
        label2.setForeground(new java.awt.Color(0, 153, 0));
        label2.setText("VS.");

        playerDamagedLabel.setText(" ");

        label7.setFont(new java.awt.Font("Stencil", 1, 18)); // NOI18N
        label7.setText("PP Left");

        ppPane.setEditable(false);
        ppPane.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jScrollPane4.setViewportView(ppPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(selectActionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(97, 97, 97)
                                .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(141, 141, 141)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(hpLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(playerDamagedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(14, 14, 14))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(hpEnemyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(enemyDamagedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hpLabel)
                            .addComponent(playerDamagedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(enemyDamagedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hpEnemyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectActionButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectActionButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectActionButtonActionPerformed
    {//GEN-HEADEREND:event_selectActionButtonActionPerformed
		Action action = (Action)actionList.getSelectedValue();
                float playerStrengthAdjusted = (float) (Game.getInstance().player.strength * 5);               
                action.damage += playerStrengthAdjusted;
                if (action.name.equals("Cut"))
                {
                    if (Game.getInstance().cutPP > 0)
                    {
                        Game.getInstance().cutPP--;
                        outputTextArea.append("Player uses " + action + System.lineSeparator());
                    }                    
                    else
                    {
                        action.damage = 0;
                        outputTextArea.append("Player fails to use " + action + "!" + System.lineSeparator());
                    }
                }
                if (action.name.equals("Splash"))
                {
                    if (Game.getInstance().splashPP > 0)
                    {
                        Game.getInstance().splashPP--;
                        outputTextArea.append("Player uses " + action + System.lineSeparator());
                    } 
                    else
                    {
                        outputTextArea.append("Player fails to use " + action + "!" + System.lineSeparator());
                    }
                }
                if (action.name.equals("Self-Destruct"))
                {
                    if (Game.getInstance().selfDestructPP > 0)
                    {
                        Game.getInstance().selfDestructPP--;
                        player.health-= player.health;
                        outputTextArea.append("Player uses " + action + System.lineSeparator());
                    }                    
                    else
                    {
                        action.damage = 0;
                        outputTextArea.append("Player fails to use " + action +  "!" + System.lineSeparator());
                    }
                }
                if (action.name.equals("Leech-Seed"))
                {
                    if (Game.getInstance().leechSeedPP > 0)
                    {
                        Game.getInstance().leechSeedPP--;
                        outputTextArea.append("Player uses " + action + System.lineSeparator());
                    }         
                    else
                    {
                        action.damage = 0;
                        outputTextArea.append("Player fails to use " + action + "!" + System.lineSeparator());
                    }
                }
                if (action.name.equals("Auto-kill"))
                {
                    if (Game.getInstance().autoKillPP > 0)
                    {
                        Game.getInstance().autoKillPP--;
                        outputTextArea.append("Player uses " + action + System.lineSeparator());
                    }                    
                    else
                    {
                        action.damage = 0;
                        outputTextArea.append("Player fails to use " + action + "!" + System.lineSeparator());
                    }
                }              
               
        
                ppPane.setText(""+Game.getInstance().cutPP+System.lineSeparator()+
                               ""+Game.getInstance().splashPP+System.lineSeparator()+
                               ""+Game.getInstance().selfDestructPP+System.lineSeparator()+
                               ""+Game.getInstance().leechSeedPP+System.lineSeparator()+
                               ""+Game.getInstance().autoKillPP+System.lineSeparator());
                
                if (action.name.equals("Cut") && Game.getInstance().cutPP <= 0)
                
		//outputTextArea.append("Player uses " + action + System.lineSeparator());
		outputTextArea.append("    Does " + action.damage + " pts damage" + System.lineSeparator());
                enemyDamagedLabel.setText("- " + action.damage);
		enemy.health -= action.damage;
		//outputTextArea.append("    " + enemy.type + " has " + enemy.health + " pts left" + System.lineSeparator());
		if (enemy.isDead())
		{
			setVisible(false);
			return;
		}

		int damage = enemy.getAttackDamage();
		outputTextArea.append(enemy.type + " does " + damage +
				" points of damage" + System.lineSeparator());
                int actualDamage = Math.abs(damage - action.heal);
                playerDamagedLabel.setText("- " + actualDamage);
		player.health -= actualDamage;              
		hpLabel.setText(""+player.health);
		if (player.isDead())
		{
			setVisible(false);
		}
                hpEnemyLabel.setText(""+  enemy.health);                
    }//GEN-LAST:event_selectActionButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList actionList;
    private java.awt.Label enemyDamagedLabel;
    private java.awt.Label hpEnemyLabel;
    private javax.swing.JLabel hpLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label7;
    private javax.swing.JTextArea outputTextArea;
    private java.awt.Label playerDamagedLabel;
    private javax.swing.JTextPane ppPane;
    private javax.swing.JButton selectActionButton;
    // End of variables declaration//GEN-END:variables
}
